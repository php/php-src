// vim:ft=javascript

ARG_WITH("gd", "Bundled GD support", "yes,shared");
ARG_WITH("libwebp", "webp support", "yes");
ARG_WITH("libavif", "avif support", "yes");

if (PHP_GD != "no") {
	if (
		PKG_CHECK_MODULES("GD", "libjpeg freetype libpng libiconv") &&
		CHECK_HEADER_ADD_INCLUDE("gd.h", "CFLAGS_GD", PHP_GD + ";ext\\gd\\libgd") &&
		SETUP_ZLIB_LIB("gd", PHP_GD) &&
		CHECK_HEADER_ADD_INCLUDE("zlib.h", "CFLAGS", "..\\zlib;" + php_usual_include_suspects)
		) {
			PHP_EVAL_INCLINE(GD_CFLAGS, "gd");
			PHP_EVAL_LIBLINE(GD_LIBS, "gd");

		if (PKG_CHECK_MODULES("LIBXPM", "libxpm")) {
			PHP_EVAL_INCLINE(LIBXPM_CFLAGS, "gd");
			PHP_EVAL_LIBLINE(LIBXPM_LIBS, "gd");
			AC_DEFINE('HAVE_XPM', 1, "Define to 1 if you have the xpm library.");
			AC_DEFINE('HAVE_GD_XPM', 1, "Define to 1 if gd extension has XPM support.");
		}
		if (PHP_LIBWEBP != "no") {
			if (PKG_CHECK_MODULES("LIBWEBP", "libwebp")) {
				PHP_EVAL_INCLINE(LIBWEBP_CFLAGS, "gd");
				PHP_EVAL_LIBLINE(LIBWEBP_LIBS, "gd");
				AC_DEFINE("HAVE_LIBWEBP", 1, "Define to 1 if you have the libwebp library.");
				AC_DEFINE("HAVE_GD_WEBP", 1, "Define to 1 if gd extension has WebP support.");
			} else {
				WARNING("libwebp not enabled; libwebp package not found");
			}
		}
		if (PHP_LIBAVIF != "no") {
			if (PKG_CHECK_MODULES("LIBAVIF", "libavif")) {
				PHP_EVAL_INCLINE(LIBAVIF_CFLAGS, "gd");
				PHP_EVAL_LIBLINE(LIBAVIF_LIBS, "gd");
				ADD_FLAG("CFLAGS_GD", "/D HAVE_LIBAVIF /D HAVE_GD_AVIF");
			} else {
				WARNING("libavif not enabled; libavif package not found");
			}
		}
		CHECK_LIB("User32.lib", "gd", PHP_GD);
		CHECK_LIB("Gdi32.lib", "gd", PHP_GD);

		EXTENSION("gd", "gd.c", null, "-Iext/gd/libgd");
		ADD_SOURCES("ext/gd/libgd", "gd2copypal.c gd.c \
			gdcache.c gdfontg.c gdfontl.c gdfontmb.c gdfonts.c gdfontt.c \
			gdft.c gd_gd2.c gd_gd.c gd_gif_in.c gd_gif_out.c gdhelpers.c gd_io.c gd_io_dp.c \
			gd_io_file.c gd_io_ss.c gd_jpeg.c gdkanji.c gd_png.c gd_ss.c \
			gdtables.c gd_topal.c gd_wbmp.c gdxpm.c wbmp.c gd_xbm.c gd_security.c gd_transform.c \
			gd_filter.c gd_pixelate.c gd_rotate.c gd_color_match.c gd_webp.c gd_avif.c \
			gd_crop.c gd_interpolation.c gd_matrix.c gd_bmp.c gd_tga.c", "gd");
		AC_DEFINE('HAVE_GD_BUNDLED', 1, "Define to 1 if gd extension uses GD library bundled in PHP.");
		AC_DEFINE('HAVE_GD_PNG', 1, "Define to 1 if gd extension has PNG support.");
		AC_DEFINE('HAVE_GD_BMP', 1, "Define to 1 if gd extension has BMP support.");
		AC_DEFINE('HAVE_GD_TGA', 1, "Define to 1 if gd extension has TGA support.");
		AC_DEFINE('HAVE_LIBPNG', 1, "Define to 1 if you have the libpng library.");
		AC_DEFINE('HAVE_LIBJPEG', 1, "Define to 1 if you have the libjpeg library.");
		AC_DEFINE('HAVE_GD_JPG', 1, "Define to 1 if gd extension has JPEG support.");
		AC_DEFINE('HAVE_LIBFREETYPE', 1, "Define to 1 if you have the FreeType library.");
		AC_DEFINE('HAVE_GD_FREETYPE', 1, "Define to 1 if gd extension has FreeType support.");
		ADD_FLAG("CFLAGS_GD", " \
/D PHP_GD_EXPORTS=1 \
/D HAVE_GD_GET_INTERPOLATION \
		");
		if (ICC_TOOLSET) {
			ADD_FLAG("LDFLAGS_GD", "/nodefaultlib:libcmt");
		}

		PHP_INSTALL_HEADERS("ext/gd", "php_gd.h libgd/");
	} else {
		WARNING("gd not enabled; libraries and headers not found");
	}
}
