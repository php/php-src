PHP 8.4 UPGRADE NOTES

1. Backward Incompatible Changes
2. New Features
3. Changes in SAPI modules
4. Deprecated Functionality
5. Changed Functions
6. New Functions
7. New Classes and Interfaces
8. Removed Extensions and SAPIs
9. Other Changes to Extensions
10. New Global Constants
11. Changes to INI File Handling
12. Windows Support
13. Other Changes
14. Performance Improvements

========================================
1. Backward Incompatible Changes
========================================

- DOM:
  . New methods and constants were added to some DOM classes. If you inherit
    from these and you happen to have a method or property with the same name,
    you might encounter errors if the declaration is incompatible.
    Consult sections 2. New Features and 6. New Functions for a list of
    newly implemented methods and constants.

- Standard:
  . round() now validates the value of the $mode parameter and throws a ValueError
    for invalid modes. Previously invalid modes would have been interpreted as
    PHP_ROUND_HALF_UP.

========================================
2. New Features
========================================

- DOM:
  . Added constant DOMNode::DOCUMENT_POSITION_DISCONNECTED.
  . Added constant DOMNode::DOCUMENT_POSITION_PRECEDING.
  . Added constant DOMNode::DOCUMENT_POSITION_FOLLOWING.
  . Added constant DOMNode::DOCUMENT_POSITION_CONTAINS.
  . Added constant DOMNode::DOCUMENT_POSITION_CONTAINED_BY.
  . Added constant DOMNode::DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC.

========================================
3. Changes in SAPI modules
========================================

========================================
4. Deprecated Functionality
========================================

========================================
5. Changed Functions
========================================

- MBString:
  . After performance optimization, mb_strcut sometimes returns slightly different
    output for invalid UTF-8 strings. The previous implementation would sometimes
    remove invalid UTF-8 bytes just after the cut points, but in other cases, it
    would pass them through to the output unchanged. The new implementation
    always backs up to the preceding non-continuation byte (a byte which starts
    a UTF-8 character) before the starting and ending cut points, if the byte
    immediately after the cut point is a continuation byte. (For valid UTF-8
    strings, the output of mb_strcut is unchanged.)

- Standard:
  . The internal implementation for rounding to integers has been rewritten
    to be easier to verify for correctness and to be easier to maintain.
    Some rounding bugs have been fixed as a result of the rewrite. For
    example previously rounding 0.49999999999999994 to the nearest integer
    would have resulted in 1.0 instead of the correct result 0.0. Additional
    inputs might also be affected and result in different outputs compared to
    earlier PHP versions.

========================================
6. New Functions
========================================

- DOM:
  . Added DOMNode::compareDocumentPosition().

========================================
7. New Classes and Interfaces
========================================

========================================
8. Removed Extensions and SAPIs
========================================

========================================
9. Other Changes to Extensions
========================================

========================================
10. New Global Constants
========================================

- Intl:
  . The IntlDateFormatter class exposes now the new PATTERN constant
    reflecting udat api's UDAT_PATTERN.

========================================
11. Changes to INI File Handling
========================================

========================================
12. Windows Support
========================================

========================================
13. Other Changes
========================================

========================================
14. Performance Improvements
========================================

* The performance of DOMNode::C14N() is greatly improved for the case without
  an xpath query. This can give a time improvement of easily two order of
  magnitude for documents with tens of thousands of nodes.
