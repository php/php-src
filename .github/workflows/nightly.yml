name: Nightly
on:
  schedule:
   - cron: "0 1 * * *"
  workflow_dispatch: ~
jobs:
  GENERATE_MATRIX:
    name: Generate Matrix
    if: github.repository_owner == 'php' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.set-matrix.outputs.branches }}
      asan-matrix: ${{ steps.set-matrix.outputs.asan-matrix }}
    steps:
      - uses: actions/checkout@v2
        with:
          # Set fetch-depth to 0 to clone the full repository
          # including all branches. This is required to find
          # the correct commit hashes.
          fetch-depth: 0
      - name: Grab the commit mapping
        uses: actions/cache@v3
        with:
          path: branch-commit-cache.json
          # The cache key needs to change every time for the
          # cache to be updated after this job finishes.
          key: nightly-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            nightly-
      - name: Generate Matrix
        id: set-matrix
        run: php .github/nightly_matrix.php "${{ github.event_name }}" "${{ github.run_attempt }}"
  LINUX_X64:
    needs: GENERATE_MATRIX
    if: ${{ needs.GENERATE_MATRIX.outputs.branches != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.GENERATE_MATRIX.outputs.branches) }}
        debug: [true, false]
        zts: [true, false]
        include: ${{ fromJson(needs.GENERATE_MATRIX.outputs.asan-matrix) }}
    name: "${{ matrix.branch.name }}_LINUX_X64${{ matrix.name }}_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }}"
    runs-on: ubuntu-20.04
    steps:
      - name: git checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ matrix.branch.ref }}
      - name: Create mssql container
        uses: ./.github/actions/mssql
      - name: apt
        uses: ./.github/actions/apt-x64
      - name: ./configure
        uses: ./.github/actions/configure-x64
        with:
          configurationParameters: >-
            ${{ matrix.configuration_parameters }}
            --${{ matrix.debug && 'enable' || 'disable' }}-debug
            --${{ matrix.zts && 'enable' || 'disable' }}-zts
      - name: make
        run: make -j$(/usr/bin/nproc) >/dev/null
      - name: make install
        uses: ./.github/actions/install-linux
      - name: Setup
        uses: ./.github/actions/setup-x64
      - name: Test
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
      - name: Test Tracing JIT
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            -d opcache.jit_buffer_size=16M
      - name: Test OpCache
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
      - name: Test Function JIT
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            -d opcache.jit_buffer_size=16M
            -d opcache.jit=1205
      - name: Verify generated files are up to date
        uses: ./.github/actions/verify-generated-files
  MACOS:
    needs: GENERATE_MATRIX
    if: ${{ needs.GENERATE_MATRIX.outputs.branches != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.GENERATE_MATRIX.outputs.branches) }}
        debug: [true, false]
        zts: [true, false]
    name: "${{ matrix.branch.name }}_MACOS_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }}"
    runs-on: macos-10.15
    steps:
      - name: git checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ matrix.branch.ref }}
      - name: brew
        uses: ./.github/actions/brew
      - name: ./configure
        uses: ./.github/actions/configure-macos
        with:
          configurationParameters: >-
            --${{ matrix.debug && 'enable' || 'disable' }}-debug
            --${{ matrix.zts && 'enable' || 'disable' }}-zts
      - name: make
        run: |-
          export PATH="/usr/local/opt/bison/bin:$PATH"
          make -j$(sysctl -n hw.logicalcpu) >/dev/null
      - name: make install
        run: sudo make install
      - name: Test
        uses: ./.github/actions/test-macos
      - name: Test Tracing JIT
        uses: ./.github/actions/test-macos
        with:
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            -d opcache.protect_memory=1
            -d opcache.jit_buffer_size=16M
      - name: Test OpCache
        uses: ./.github/actions/test-macos
        with:
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            -d opcache.protect_memory=1
      - name: Test Function JIT
        uses: ./.github/actions/test-macos
        with:
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            -d opcache.protect_memory=1
            -d opcache.jit_buffer_size=16M
            -d opcache.jit=1205
      - name: Verify generated files are up to date
        uses: ./.github/actions/verify-generated-files
  COVERAGE_DEBUG_NTS:
    runs-on: ubuntu-20.04
    steps:
      - name: git checkout
        uses: actions/checkout@v2
      - name: Create mssql container
        uses: ./.github/actions/mssql
      - name: apt
        uses: ./.github/actions/apt-x64
      - name: Install gcovr
        run: sudo -H pip install gcovr
      - name: ./configure
        uses: ./.github/actions/configure-x64
        with:
          configurationParameters: --enable-debug --disable-zts --enable-gcov
      - name: make
        run: make -j$(/usr/bin/nproc) >/dev/null
      - name: make install
        uses: ./.github/actions/install-linux
      - name: Setup
        uses: ./.github/actions/setup-x64
      # We only test with OpCache, the difference in coverage is negligible
      - name: Test OpCache
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
      - name: Upload Test Coverage to Codecov.io
        if: always()
        run: bash <(curl -s https://codecov.io/bash)
